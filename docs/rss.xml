<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>BilimLink</title><link>https://Kairat619.github.io/bilimlink</link><description>A simple life created by demanding less</description><copyright>BilimLink</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://Kairat619.github.io/bilimlink</link></image><lastBuildDate>Tue, 28 May 2024 16:22:08 +0000</lastBuildDate><managingEditor>BilimLink</managingEditor><ttl>60</ttl><webMaster>BilimLink</webMaster><item><title>TinaCMS + 11ty</title><link>https://Kairat619.github.io/bilimlink/post/TinaCMS%20%2B%2011ty.html</link><description>I was browsing the web and kept coming across [TinaCMS](https://tina.io/) and how you can run it locally, as well as in their cloud platform. What I did not want to do was add a lot of complexity to adding this to my site, and make changes to the structure of my site, more dependencies, etc. Luckily, most of the installation was a drop-in-place system and was able to get started pretty quickly.&#13;
&#13;
There is a nice [11ty + TinaCMS Setup Guide](https://tina.io/docs/frameworks/11ty/) as well. Plus, I'll share a little of my setup post install.&#13;
&#13;
Getting Started&#13;
TinaCMS has a pretty simple quick setup guide to get their CMS style solution added to your project.&#13;
&#13;
npx @tinacms/cli@latest init&#13;
This will install the tinacms and accompanying CLI tools if needed. You might get asked some basic questions, and I took the defaults, as I didn't have much to change.&#13;
&#13;
Configuration after install&#13;
After the installation, their guide has you go through your new tina/config.ts file and update any [content modeling](https://tina.io/docs/schema/), as they call it. A fancy way to state you can adjust the CMS to your project and customize the system to your needs.&#13;
&#13;
I'll review the changes I made for my [11ty](https://www.11ty.dev/) install later.&#13;
&#13;
Starting TinaCMS&#13;
To get started and make sure everything is starting correctly, we can run the following command.&#13;
&#13;
npx tinacms dev - c '@11ty/eleventy --serve'&#13;
This will start the tinacms server and then your custom dev command to serve your content while editing.&#13;
&#13;
Once your page is running and started, you can browse to http://localhost:8080/admin or &lt;your-dev-server&gt;:&lt;dev-port&gt;/admin and see something like the following&#13;
&#13;
Welcome screen of TinaCMS after initial install&#13;
&#13;
Deploying your site&#13;
Once you start editing and get your site configured, you can commit your tina/ folder that has your configurations to your remote git host and then integrate with the [Tina Cloud](https://app.tina.io/) and be able to edit files online from anywhere.&#13;
&#13;
For now, I am going to keep it all local, and could commit the tina/ folder to keep configuration consistent across devices.&#13;
&#13;
If you'd like more information, check out the documentation for [Deploying Tina to your site](https://tina.io/docs/frameworks/11ty/#deploy-tina-to-your-site).&#13;
&#13;
My Configuration Changes&#13;
First, I wanted to configure a new run command. The npx tinacms dev -c 'eleventy --serve' is a bit much to always type in. Plus I have dev command that properly starts up my stylus, eleventy watch, and serve commands.&#13;
&#13;
'scripts': {&#13;
  'dev': 'cross-env ELEVENTY_ENV=dev concurrently -n stylus,11ty \'npm:watch:stylus\' \'npm:watch:11ty\'',&#13;
  'cms': 'npx tinacms dev -c \'npm run dev\'',&#13;
},&#13;
Now I can run npm run cms and properly the CMS engine and the 11ty project.&#13;
&#13;
Within the tina/config.ts file, you have all your configurations for your CMS site.&#13;
&#13;
The build and media are configured based on where you have your static content and build directory going when 11ty builds your site. For me, I have it create a build folder on the root and my media is stored in a static folder at the root that gets copied over to the build folder on build.&#13;
&#13;
build: {&#13;
  outputFolder: 'admin',&#13;
  publicFolder: 'build',&#13;
},&#13;
media: {&#13;
  tina: {&#13;
    mediaRoot: 'static',&#13;
    publicFolder: 'build',&#13;
  },&#13;
},&#13;
The schema is where the real fun begins! You define a collection, and can customize the settings as well as the fields for the front matter, defaults, file names, and more.&#13;
&#13;
By default, TinaCMS names your file the title you provide and adds the markdown extension. I wanted to require a title and have it save the file name according to how my site is built.&#13;
&#13;
const dateTime = (new Date()).toISOString().split('T')[0];&#13;
&#13;
// excerpt from the export function of defineConfig();&#13;
schema: {&#13;
  collections: [&#13;
    {&#13;
      name: 'post',&#13;
      label: 'Posts',&#13;
      path: 'src/posts',&#13;
      format: 'md',&#13;
      },&#13;
      fields: [&#13;
        {&#13;
          type: 'string',&#13;
          name: 'title',&#13;
          label: 'Title',&#13;
          isTitle: true,&#13;
          required: true,&#13;
        },&#13;
        {&#13;
          type: 'rich-text',&#13;
          name: 'body',&#13;
          label: 'Body',&#13;
          isBody: true,&#13;
        },&#13;
      ],&#13;
      ui: {&#13;
        filename: {&#13;
          // if disabled, the editor can not edit the filename&#13;
          readonly: true,&#13;
          // Example of using a custom slugify function&#13;
          slugify: (values) =&gt; {&#13;
            // Values is an object containing all the values of the form. In this case it is {title?: string, topic?: string}&#13;
            return `${dateTime}-${values.title&#13;
              ?.toLowerCase()&#13;
              .replace(/ /g, '-')}`&#13;
          },&#13;
        },&#13;
      },&#13;
    },&#13;
  ],&#13;
  }&#13;
There is a lot here. I was able to define the custom path to my posts in src/posts and TinaCMS properly displayed my posts in the year folders I recently added. The ui:{} section sets the filename filed to read-only, so you can't edit the field, this is optional. However, I did create a dateTime constant prior to the export function to get today's date in the format needed. We can then pass along the built-in slugify filter and return the YYYY-mm-dd-title-of-file.md as needed.&#13;
&#13;
I added a date field, and was able to set a default for this value as well. TinaCMS has some nice filters on the files, but reads the front matter for a date item, and my posts do not have this already. Once I added a custom field, this will be good moving forward.&#13;
&#13;
{&#13;
  label: 'Date',&#13;
  name: 'date',&#13;
  type: 'datetime',&#13;
    ui: {&#13;
      dateFormat: 'YYYY-MM-DD',   &#13;
    },&#13;
},&#13;
I kept with the same date format as the file name for consistency. What is nice is the ability to set default values for the fields as well.&#13;
&#13;
schema: {&#13;
  collections: [&#13;
    {&#13;
      name: 'post',&#13;
      label: 'Posts',&#13;
      path: 'src/posts',&#13;
      format: 'md',&#13;
      defaultItem: () =&gt; {&#13;
        return {&#13;
          // When a new post is created the title field will be set to 'New post'&#13;
          date: dateTime, // the const defined previously.&#13;
        }&#13;
      },&#13;
      fields: [&#13;
        ...&#13;
The other neat thing you can do with string fields is create a list of items. I used this for my site's tags that I choose when writing the posts.&#13;
&#13;
{&#13;
  type: 'string',&#13;
  label: 'Tags',&#13;
  name: 'tags',&#13;
  list: true,&#13;
    options: [&#13;
      {&#13;
        value: '100DaysToOffload',&#13;
        label: '100DaysToOffload'&#13;
      },&#13;
      {&#13;
        value: '11ty',&#13;
        label: '11ty'&#13;
      },&#13;
    ]&#13;
}&#13;
Here is what this looks like now.&#13;
&#13;
Screenshot of the final TinaCMS config updates.&#13;
&#13;
Conclusion&#13;
I know I previously wrote about [CloudCannon and 11ty](https://claytonerrington.com/blog/cloudcannon-eleventy/), but with today's technology there are plenty of great choices. CloudCannon is a great choice as well. Currently, it is in some infancy and will only get better. TinaCMS I have heard of for a while, just never had a moment to get it tested and working until now. There is some setup needed still, but so far I am enjoying the configuration changes and ability to write in a visual way as well.ã€‚</description><guid isPermaLink="true">https://Kairat619.github.io/bilimlink/post/TinaCMS%20%2B%2011ty.html</guid><pubDate>Sun, 14 Apr 2024 14:40:32 +0000</pubDate></item></channel></rss>